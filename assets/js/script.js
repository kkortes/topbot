// Generated by CoffeeScript 1.8.0
(function() {
  /*!
 * Waves v0.5.5
 * http://fian.my.id/Waves 
 * 
 * Copyright 2014 Alfiana E. Sibuea and other contributors 
 * Released under the MIT license 
 * https://github.com/fians/Waves/blob/master/LICENSE 
 */

;(function(window) {
    'use strict';

    var Waves = Waves || {};
    var $$ = document.querySelectorAll.bind(document);

    // Find exact position of element
    function isWindow(obj) {
        return obj !== null && obj === obj.window;
    }

    function getWindow(elem) {
        return isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView;
    }

    function offset(elem) {

        var docElem, win,
            box = {top: 0, left: 0},
            doc = elem && elem.ownerDocument;

        docElem = doc.documentElement;

        if (typeof elem.getBoundingClientRect !== typeof undefined) {
            box = elem.getBoundingClientRect();
        }
        win = getWindow(doc);
        return {
            top: box.top + win.pageYOffset - docElem.clientTop,
            left: box.left + win.pageXOffset - docElem.clientLeft
        };
    }

    function convertStyle(obj) {

        var style = '';

        for (var a in obj) {
            if (obj.hasOwnProperty(a)) {
                style += (a + ':' + obj[a] + ';');
            }
        }

        return style;
    }

    var Effect = {

        // Effect delay
        duration: 500,

        show: function(e) {

            // Disable right click
            if (e.button === 2) {
                return false;
            }

            var el = this;

            // Create ripple
            var ripple = document.createElement('div');
            ripple.className = 'waves-ripple';
            el.appendChild(ripple);

            // Get click coordinate and element witdh
            var pos         = offset(el);
            var relativeY   = (e.pageY - pos.top);
            var relativeX   = (e.pageX - pos.left);
            var scale       = 'scale('+((el.clientWidth / 100) * 2.5)+')';
            
            // Support for touch devices
            if ('touches' in e) {
              relativeY   = (e.touches[0].pageY - pos.top);
              relativeX   = (e.touches[0].pageX - pos.left);
            }

            // Attach data to element
            ripple.setAttribute('data-hold', Date.now());
            ripple.setAttribute('data-scale', scale);
            ripple.setAttribute('data-x', relativeX);
            ripple.setAttribute('data-y', relativeY);

            // Set ripple position
            var rippleStyle = {
                'top': relativeY+'px',
                'left': relativeX+'px'
            };
            
            ripple.className = ripple.className + ' waves-notransition';
            ripple.setAttribute('style', convertStyle(rippleStyle));
            ripple.className = ripple.className.replace('waves-notransition', '');

            // Scale the ripple
            rippleStyle['-webkit-transform'] = scale;
            rippleStyle['-moz-transform'] = scale;
            rippleStyle['-ms-transform'] = scale;
            rippleStyle['-o-transform'] = scale;
            rippleStyle.transform = scale;
            rippleStyle.opacity   = '1';

            rippleStyle['-webkit-transition-duration'] = Effect.duration + 'ms';
            rippleStyle['-moz-transition-duration']    = Effect.duration + 'ms';
            rippleStyle['-o-transition-duration']      = Effect.duration + 'ms';
            rippleStyle['transition-duration']         = Effect.duration + 'ms';

            ripple.setAttribute('style', convertStyle(rippleStyle));

        },

        hide: function() {
            
            var el = this;

            var width = el.clientWidth * 1.4;
            
            // Get first ripple
            var ripple = null;

            var childrenLength = el.children.length;

            for (var a = 0; a < childrenLength; a++) {
                if (el.children[a].className.indexOf('waves-ripple') !== -1) {
                    ripple = el.children[a];
                    continue;
                }
            }

            if (!ripple) {
                return false;
            }

            var relativeX   = ripple.getAttribute('data-x');
            var relativeY   = ripple.getAttribute('data-y');
            var scale       = ripple.getAttribute('data-scale');

            // Get delay beetween mousedown and mouse leave
            var diff = Date.now() - Number(ripple.getAttribute('data-hold'));
            var delay = 500 - diff;

            if (delay < 0) {
                delay = 0;
            }

            // Fade out ripple after delay
            setTimeout(function() {

                var style = {
                    'top': relativeY+'px',
                    'left': relativeX+'px',
                    'opacity': '0',

                    // Duration
                    '-webkit-transition-duration': Effect.duration + 'ms',
                    '-moz-transition-duration': Effect.duration + 'ms',
                    '-o-transition-duration': Effect.duration + 'ms',
                    'transition-duration': Effect.duration + 'ms',
                    '-webkit-transform': scale,
                    '-moz-transform': scale,
                    '-ms-transform': scale,
                    '-o-transform': scale,
                    'transform': scale,
                };

                ripple.setAttribute('style', convertStyle(style));

                setTimeout(function() {

                    try {
                        el.removeChild(ripple);
                    } catch(e) {
                        return false;
                    }

                    
                }, Effect.duration);

            }, delay);

        },

        // Little hack to make <input> can perform waves effect
        wrapInput: function(elements) {

            for (var a = 0; a < elements.length; a++) {

                var el = elements[a];

                if (el.tagName.toLowerCase() === 'input') {

                    var parent = el.parentNode;

                    // If input already have parent just pass through
                    if (parent.tagName.toLowerCase() === 'i' && parent.className.indexOf('waves-effect') !== -1) {
                        return false;
                    }

                    // Put element class and style to the specified parent
                    var wrapper = document.createElement('i');
                    wrapper.className = el.className + ' waves-input-wrapper';

                    var elementStyle = el.getAttribute('style');

                    if (!elementStyle) {
                        elementStyle = '';
                    }

                    wrapper.setAttribute('style', elementStyle);
                    
                    el.className = 'waves-button-input';
                    el.removeAttribute('style');

                    // Put element as child
                    parent.replaceChild(wrapper, el);
                    wrapper.appendChild(el);

                }
                
            }
        }
    };

    Waves.displayEffect = function(options) {

        options = options || {};

        if ('duration' in options) {
            Effect.duration = options.duration;
        }
        
        //Wrap input inside <i> tag
        Effect.wrapInput($$('.waves-effect'));

        Array.prototype.forEach.call($$('.waves-effect'), function(i) {
          
            if ('ontouchstart' in window) {
              i.addEventListener('touchstart', Effect.show, false);
              i.addEventListener('touchend',   Effect.hide, false);
              i.addEventListener('touchcancel',   Effect.hide, false);
            } else {
              i.addEventListener('mousedown', Effect.show, false);
              i.addEventListener('mouseup', Effect.hide, false);
              i.addEventListener('mouseleave', Effect.hide, false);
            }

        });

    };

    window.Waves = Waves;

})(window);
  var activateLists, alignChildren, checkResize, elements, getPlatform, init, initFlip, initSlider, initWaves, makeSquare, placeholderImage, rows, slide, slideTo;

  getPlatform = function() {
    return window.getComputedStyle(document.body, ':before').getPropertyValue('content').replace(/'/g, '').replace(/"/g, '');
  };

  rows = {
    'mod-row': ['card', 'tile', 'flip'],
    'mod-lists .list-item': ['pull-left', 'pull-right']
  };

  alignChildren = function(rows) {
    var children, row, _results;
    if (rows == null) {
      rows = {};
    }
    _results = [];
    for (row in rows) {
      children = rows[row];
      _results.push($('.' + row).each(function() {
        var child, parent, tallest, _i, _len, _results1;
        parent = $(this);
        tallest = false;
        _results1 = [];
        for (_i = 0, _len = children.length; _i < _len; _i++) {
          child = children[_i];
          parent.find('.' + child).each(function() {
            var height, obj;
            obj = $(this);
            obj.css('height', 'auto');
            height = obj.outerHeight();
            if (height > tallest) {
              return tallest = height;
            }
          });
          if (tallest) {
            _results1.push((function() {
              var _j, _len1, _results2;
              _results2 = [];
              for (_j = 0, _len1 = children.length; _j < _len1; _j++) {
                child = children[_j];
                _results2.push(parent.find('.' + child).css('height', tallest));
              }
              return _results2;
            })());
          } else {
            _results1.push(void 0);
          }
        }
        return _results1;
      }));
    }
    return _results;
  };

  elements = ['resize', 'circle'];

  makeSquare = function(elements, angle) {
    var element, _i, _len, _results;
    if (elements == null) {
      elements = ['resize'];
    }
    if (angle == null) {
      angle = 'height';
    }
    _results = [];
    for (_i = 0, _len = elements.length; _i < _len; _i++) {
      element = elements[_i];
      _results.push($('.' + element).each(function() {
        var obj, reset, value;
        obj = $(this);
        if (angle === 'height') {
          value = obj.innerWidth();
          reset = 'width';
        } else {
          value = obj.outerHeight();
          reset = 'height';
        }
        return obj.css(angle, value);
      }));
    }
    return _results;
  };

  checkResize = function() {
    return $(window).resize(function() {
      clearTimeout(window.counter);
      return window.counter = setTimeout(function() {
        makeSquare(elements);
        alignChildren(rows);
        return window.platform = getPlatform();
      }, 500);
    });
  };

  activateLists = function() {
    return $('.minimized li a').on('click', function() {
      var children, obj, toggle;
      obj = $(this);
      if (obj.attr('href') === '#') {
        children = obj.parent().children('ul');
        toggle = obj.find('.toggle');
        if (children.hasClass('opened')) {
          children.removeClass('opened');
          toggle.removeClass(toggle.attr('data-altclass'));
          toggle.addClass(toggle.attr('data-class'));
          children.slideUp('fast');
        } else {
          children.addClass('opened');
          toggle.removeClass(toggle.attr('data-class'));
          toggle.addClass(toggle.attr('data-altclass'));
          children.slideDown('fast');
        }
        return false;
      }
    });
  };

  initFlip = function() {
    var flips;
    flips = $('.flip');
    flips.each(function() {
      var events, flip;
      flip = $(this);
      events = {};
      if (flip.hasClass('onclick')) {
        events.click = function() {
          if (!flip.hasClass('toggle')) {
            return flip.addClass('toggle');
          } else {
            return flip.removeClass('toggle');
          }
        };
      } else {
        events.mouseenter = function() {
          return flip.addClass('toggle');
        };
        events.mouseleave = function() {
          return flip.removeClass('toggle');
        };
      }
      flip.on(events);
    });
  };

  slide = function(obj, nextslide) {
    var marginleft;
    marginleft = nextslide * 100;
    obj.self.children('.stripe').animate({
      'marginLeft': '-' + marginleft + '%'
    });
    obj.nav.find('a').removeClass('active');
    obj.nav.find('a:eq(' + nextslide + ')').addClass('active');
    obj.self.data('currentslide', nextslide);
    if ((nextslide + 1) === obj.self.find('.slide').length) {
      obj.prevbutton.removeClass('inactive');
      obj.nextbutton.addClass('inactive');
      return 0;
    } else {
      obj.nextbutton.removeClass('inactive');
      if (nextslide === 0) {
        obj.prevbutton.addClass('inactive');
      } else {
        obj.prevbutton.removeClass('inactive');
      }
      return nextslide;
    }
  };

  slideTo = function(direction, slider, interval) {
    var currentslide;
    if (interval == null) {
      interval = false;
    }
    if (!interval) {
      clearInterval(slider.self.data('interval'));
    }
    currentslide = slider.self.data('currentslide');
    if (direction === 'next') {
      currentslide++;
      if (currentslide >= slider.self.find('.stripe.crow .slide').length) {
        currentslide = 0;
      }
      return slide(slider, currentslide);
    } else if (direction === 'prev') {
      currentslide--;
      if (currentslide < 0) {
        currentslide = slider.self.find('.stripe.crow .slide').length - 1;
      }
      return slide(slider, currentslide);
    }
  };

  initSlider = function() {
    var sliders;
    sliders = $('.slider');
    sliders.each(function() {
      var hammertime, slider;
      slider = {
        self: $(this),
        nav: $(this).find('.slider-nav'),
        nextbutton: $(this).find('.next'),
        prevbutton: $(this).find('.prev'),
        interval: 0
      };
      if (slider.self.find('.stripe.crow .slide').length > 1) {
        if (typeof slider.self.data('currentslide') === 'undefined') {
          slider.self.data('currentslide', 0);
        }
        if (slider.interval) {
          slider.self.data('interval', setInterval(function() {
            return slideTo('next', slider, true);
          }, slider.interval));
        }
        hammertime = new Hammer(slider.self[0]);
        hammertime.on('swipeleft', function(ev) {
          return slideTo('next', slider);
        });
        hammertime.on('swiperight', function(ev) {
          return slideTo('prev', slider);
        });
      }
      if (slider.nextbutton.length) {
        slider.nextbutton.on('click', function() {
          slideTo('next', slider);
          return false;
        });
      }
      if (slider.prevbutton.length) {
        slider.prevbutton.on('click', function() {
          slideTo('prev', slider);
          return false;
        });
      }
      return slider.nav.find('a').on('click', function() {
        var index;
        clearInterval(slider.self.data('interval'));
        index = slider.nav.find('a').index(this);
        slide(slider, index);
        return false;
      });
    });
  };

  initWaves = function() {
    return Waves.displayEffect();
  };

  init = function() {
    setTimeout(function() {
      makeSquare(elements);
      return alignChildren(rows);
    }, 250);
    checkResize();
    activateLists();
    initSlider();
    initWaves();
    return initFlip();
  };

  init();

  placeholderImage = function() {
    return $('img').each(function() {
      if (!$(this).attr('src')) {
        return $(this).attr('src', window.app_url + 'assets/image/placeholder/default.jpg');
      }
    });
  };

  init = function() {
    return placeholderImage();
  };

  init();

}).call(this);

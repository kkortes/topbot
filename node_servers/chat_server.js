// Generated by CoffeeScript 1.7.1
var assignGuestName, currentRoom, guestNumber, handleClientDisconnection, handleMessageBroadcasting, handleNameChangeAttempts, handleRoomJoining, io, joinRoom, namesUsed, nickNames, socketio;

socketio = require('socket.io');

io = '';

guestNumber = 1;

nickNames = {};

namesUsed = [];

currentRoom = {};

exports.listen = function(server) {
  io = socketio.listen(server);
  io.set('log level', 1);
  io.sockets.on('connection', function(socket) {
    guestNumber = assignGuestName(socket, guestNumber, nickNames, namesUsed);
    joinRoom(socket, 'Lobby');
    handleMessageBroadcasting(socket, nickNames);
    handleNameChangeAttempts(socket, nickNames, namesUsed);
    handleRoomJoining(socket);
    socket.on('rooms', function() {
      socket.emit('rooms', io.sockets.manager.rooms);
    });
    handleClientDisconnection(socket, nickNames, namesUsed);
  });
};

assignGuestName = function(socket, guestNumber, nickNames, namesUsed) {
  var name;
  name = 'Guest' + guestNumber;
  nickNames[socket.id] = name;
  socket.emit('nameResult', {
    success: true,
    name: name
  });
  namesUsed.push(name);
  console.log(name + ' joined!');
  return guestNumber + 1;
};

handleNameChangeAttempts = function(socket, nickNames, namesUsed) {
  socket.on('nameAttempt', function(name) {
    var previousName, previousNameIndex;
    if (name.indexOf('Guest') === 0) {
      return socket.emit('nameResult', {
        success: false,
        message: 'Names cannot begin with "Guest".'
      });
    } else {
      if (namesUsed.indexOf(name) === -1) {
        previousName = nickNames[socket.id];
        previousNameIndex = namesUsed.indexOf(previousName);
        namesUsed.push(name);
        nickNames[socket.id] = name;
        delete namesUsed[previousNameIndex];
        socket.emit('nameResult', {
          success: true,
          name: name
        });
        return socket.broadcast.to(currentRoom[socket.id]).emit('message', {
          text: previousName + ' is now known as ' + name + '.'
        });
      } else {
        return socket.emit('nameResult', {
          success: false,
          message: 'That name is already in use.'
        });
      }
    }
  });
};

handleMessageBroadcasting = function(socket) {
  socket.on('message', function(message) {
    console.log(nickNames[socket.id] + ' wrote: "' + message.text + '"');
    socket.broadcast.to(message.room).emit('message', {
      text: nickNames[socket.id] + ': ' + message.text
    });
  });
};

handleRoomJoining = function(socket) {
  socket.on('join', function(room) {
    socket.leave(currentRoom[socket.id]);
    joinRoom(socket, room.newRoom);
  });
};

handleClientDisconnection = function(socket) {
  socket.on('disconnect', function() {
    var name, nameIndex;
    nameIndex = namesUsed.indexOf(nickNames[socket.id]);
    name = namesUsed[nameIndex];
    delete namesUsed[nameIndex];
    delete nickNames[socket.id];
    console.log(name + ' left..');
  });
};

joinRoom = function(socket, room) {
  var i, index, userSocketId, usersInRoom, usersInRoomSummary, _i, _len;
  socket.join(room);
  currentRoom[socket.id] = room;
  socket.emit('joinResult', {
    room: room
  });
  socket.broadcast.to(room).emit('message', {
    text: nickNames[socket.id] + ' has joined ' + room + '.'
  });
  usersInRoom = io.sockets.clients(room);
  if (usersInRoom.length > 1) {
    usersInRoomSummary = 'Users currently in ' + room + ': ';
    i = 0;
    for (_i = 0, _len = usersInRoom.length; _i < _len; _i++) {
      index = usersInRoom[_i];
      userSocketId = usersInRoom[i].id;
      if (userSocketId !== socket.id) {
        if (i > 0) {
          usersInRoomSummary += ', ';
        }
        usersInRoomSummary += nickNames[userSocketId];
      }
      i++;
    }
    usersInRoomSummary += '.';
    socket.emit('message', {
      text: usersInRoomSummary
    });
  }
};
